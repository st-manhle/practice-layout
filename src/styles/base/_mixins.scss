// === RESPOND ABOVE ===
// @include respond-above(small) {}
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// === RESPOND BELOW ===
// @include respond-below(small) {}
@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// === RESPOND BETWEEN ===
// @include respond-between(small, medium);
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}
@mixin font-icon($icon) {
  content: $icon;
  font-family: "asahi";
  text-transform: none;
}


// === CONVERT PXREM ===

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
 }

 @function convertRootPxToEm($value) {
  // check for null:
  @if($value == null) {
    @return $value;
  }
  // assume em:
  @if (unitless($value) or unit($value) == em) {
    @return 0em + $value;
  }
  @else {
    @return 0em + strip-units($value)/16;
  }
 }
 @function convertPxToRem($px) {
 @return 0rem + strip-units($px)/16;
 }

 @mixin pxRem($property,$values) {
  // Create a couple of empty lists as output buffers:
  $px-values: ();
  $rem-values: ();

  // Ensure $values is a list.
  @if type-of($values) != 'list' {
    $values: join((), $values);
  }

  // Loop through the $values list:
  @each $value in $values {
    @if type-of($value) == number and (unitless($value) or unit($value) == px) {
    $px-values: join($px-values, 0px + ($value));
      $rem-values: join($rem-values, convertPxToRem($value));
    }
    @else {
    // no conversion:
    $px-values: join($px-values, $value);
    $rem-values: join($rem-values, $value);
    }
  }

  #{$property}: $px-values;

  // don't add media query if it's not needed:
  @if $px-values != $rem-values {
    // @media only all {
      #{$property}: $rem-values;
    // }
  }
}
// == End / Convert Px To Rem


/*Padding*/
$value : 5;

$sizeList : 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10;

/*Margin*/
@each $size in $sizeList {
  .mg-#{$size} {
    @include pxRem(margin, $value * $size !important);
  }
  .mt-#{$size} {
    @include pxRem(margin-top, $value * $size !important);
  }
  .ml-#{$size} {
    @include pxRem(margin-left, $value * $size !important);
  }
  .mb-#{$size} {
    @include pxRem(margin-bottom, $value * $size !important);
  }
  .mr-#{$size} {
    @include pxRem(margin-right, $value * $size !important);
  }
  .pd-#{$size} {
    @include pxRem(padding, $value * $size !important);
  }
  .pl-#{$size} {
    @include pxRem(padding-left, $value * $size !important);
  }
  .pr-#{$size} {
    @include pxRem(padding-right, $value * $size !important);
  }
  .pt-#{$size} {
    @include pxRem(padding-top, $value * $size !important);
  }
  .pb-#{$size} {
    @include pxRem(padding-bottom, $value * $size !important);
  }
}

@mixin circleHalfLeft ($size) {
  @include pxRem(height, ($size * 2));
  @include pxRem(width, $size);
  border-radius: 0;
  @include pxRem(border-bottom-left-radius, ($size * 2));
  @include pxRem(border-top-left-radius, ($size * 2));
}
